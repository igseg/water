y = max(data_SPEI$Change.in.Storage,na.rm = TRUE),
label = paste0("slope:", line_values_storage_spei$coefficients[2]),
parse = TRUE,size = 2.5)+
ggtitle (storage_title_spei)+
theme_classic()
}else{
storage_plot_SPEI <-grid.rect(gp=gpar(col="white"))
}
}
#SSI_analysis Refence Gages
test <- sum(data_SPEI$Reference_SSI, na.rm = TRUE)
if (test ==0){
storage_plot_SSI_ref <-grid.rect(gp=gpar(col="white"))
}else{
line_values_storage_ssi_ref <-  lm(as.numeric(data_SPEI$Change.in.Storage) ~ as.numeric(data_SPEI$Reference_SSI), data = data_SPEI)
data_SPEI$predicted_storage_ssi_ref <- data_SPEI$Reference_SSI*line_values_storage_ssi_ref$coefficients[2]+ line_values_storage_ssi_ref$coefficients[1]
storage_unexplained_variance <- sum((data_SPEI$predicted_storage_ssi_ref - data_SPEI$Change.in.Storage)^2, na.rm = TRUE)
storage_total_variance <- sum((data_SPEI$Change.in.Storage - mean(data_SPEI$Change.in.Storage, na.rm = TRUE))^2, na.rm = TRUE)
r_squared_storage_ssi_ref <- 1-storage_unexplained_variance/storage_total_variance
if (length(which(is.na(data_SPEI$predicted_storage_ssi_ref) == FALSE)) >10){
statistics[j,14] <- c(r_squared_storage_ssi_ref)
statistics[j,15] <- c(line_values_storage_ssi_ref$coefficients[2])
#plot SSI reference Storage
storage_title_ssi_ref <- paste0(HUC4_data[j,1], " Reference_gage_SSI ")
storage_plot_SSI_ref <-  ggplot(data_SPEI)+
geom_point(aes(x = Reference_SSI, y = Change.in.Storage), color = "navy")+
geom_line(aes(x = Reference_SSI, y = predicted_storage_ssi_ref), color = "brown")+
annotate("text",
x =-0.5,
y = max(data_SPEI$Change.in.Storage,na.rm = TRUE),
label = paste0("r^2:",r_squared_storage_ssi_ref),
parse = TRUE,size = 2.5)+
annotate("text",
x =0.5,
y = max(data_SPEI$Change.in.Storage,na.rm = TRUE),
label = paste0("slope:", line_values_storage_ssi_ref$coefficients[2]),
parse = TRUE,size = 2.5)+
ggtitle (storage_title_ssi_ref)+
theme_classic()
}else{
storage_plot_SSI_ref <-grid.rect(gp=gpar(col="white"))
}
}
#SSI_analysis Non reference Gages
line_values_storage_ssi <-  lm(as.numeric(data_SPEI$Change.in.Storage) ~ as.numeric(data_SPEI$Longest_period_SSI), data = data_SPEI)
data_SPEI$predicted_storage_ssi <- data_SPEI$Longest_period_SSI*line_values_storage_ssi_ref$coefficients[2]+ line_values_storage_ssi_ref$coefficients[1]
storage_unexplained_variance <- sum((data_SPEI$predicted_storage_ssi - data_SPEI$Change.in.Storage)^2, na.rm = TRUE)
storage_total_variance <- sum((data_SPEI$Change.in.Storage - mean(data_SPEI$Change.in.Storage, na.rm = TRUE))^2, na.rm = TRUE)
r_squared_storage_ssi <- 1-storage_unexplained_variance/storage_total_variance
if (length(which(is.na(data_SPEI$predicted_storage_ssi_period) == FALSE)) >10){
statistics[j,20] <- c(r_squared_storage_ssi)
statistics[j,21] <- c(line_values_storage_ssi$coefficients[2])
#plot SSI Longest Period
storage_title_ssi_period <- paste0(HUC4_data[j,1], " Longest_Period_SSI ")
storage_plot_SSI_period <-  ggplot(data_SPEI)+
geom_point(aes(x = Longest_period_SSI, y = Change.in.Storage), color = "navy")+
geom_line(aes(x = Longest_period_SSI, y = predicted_storage_ssi), color = "brown")+
annotate("text",
x =-0.5,
y = max(data_SPEI$Change.in.Storage,na.rm = TRUE),
label = paste0("r^2:",r_squared_storage_ssi),
parse = TRUE,size = 2.5)+
annotate("text",
x =0.5,
y = max(data_SPEI$Change.in.Storage,na.rm = TRUE),
label = paste0("slope:", line_values_storage_ssi$coefficients[2]),
parse = TRUE,size = 2.5)+
ggtitle (storage_title_ssi_period)+
theme_classic()
}else{
storage_plot_SSI_period <-grid.rect(gp=gpar(col="white"))
}
}else{
storage_plot_SPI <- grid.rect(gp=gpar(col="white")) #makes empty plot for ggplot
storage_plot_SPEI <- grid.rect(gp=gpar(col="white"))
storage_plot_SSI_ref <- grid.rect(gp=gpar(col="white"))
storage_plot_SSI_period <- grid.rect(gp=gpar(col="white"))
}
if (sum(data_SPEI$Average.Inflow, na.rm = TRUE) >0){
if (test_SPI ==0){
inflow_plot_SPI <-grid.rect(gp=gpar(col="white"))
}else{
# SPI ANALYSIS
line_values_inflow <-  lm(as.numeric(data_SPEI$Average.Inflow) ~ as.numeric(data_SPEI$SPI), data = data_SPEI)
data_SPEI$predicted_inflow_spi <- data_SPEI$SPI*line_values_inflow$coefficients[2]+ line_values_inflow$coefficients[1]
inflow_unexplained_variance <- sum((data_SPEI$predicted_inflow - data_SPEI$Average.Inflow)^2, na.rm = TRUE)
inflow_total_variance <- sum((data_SPEI$Average.Inflow - mean(data_SPEI$Average.Inflow, na.rm = TRUE))^2, na.rm = TRUE)
r_squared_inflow_spi <- 1-inflow_unexplained_variance/inflow_total_variance
if (length(which(is.na(data_SPEI$predicted_inflow_spi) == FALSE)) >10){
statistics[j,4] <- c(r_squared_inflow_spi)
statistics[j,5] <- c(line_values_inflow$coefficients[2])
#plot SPI inflow
inflow_title_spi <- paste0(HUC4_data[j,1], " Inflow_SPI ")
inflow_plot_SPI <-  ggplot(data_SPEI)+
geom_point(aes(x = SPI, y = Average.Inflow), color = "navy")+
geom_line(aes(x = SPI, y = predicted_inflow_spi), color = "brown")+
annotate("text",
x =-0.5,
y = max(data_SPEI$Average.Inflow, na.rm = TRUE),
label = paste0("r^2:",r_squared_inflow_spi),
parse = TRUE,size = 2.5)+
annotate("text",
x =0.5,
y = max(data_SPEI$Average.Inflow, na.rm = TRUE),
label = paste0("slope:", line_values_inflow$coefficients[2]),
parse = TRUE,size = 2.5)+
ggtitle (inflow_title_spi)+
theme_classic()
}
else{
inflow_plot_SPI <-grid.rect(gp=gpar(col="white"))
}
}
if (test_SPEI ==0){
inflow_plot_SPEI <-grid.rect(gp=gpar(col="white"))
}else{
line_values_inflow_spei <-  lm(as.numeric(data_SPEI$Average.Inflow) ~ as.numeric(data_SPEI$SPEI), data = data_SPEI)
data_SPEI$predicted_inflow_spei <- data_SPEI$SPEI*line_values_inflow_spei$coefficients[2]+ line_values_inflow_spei$coefficients[1]
inflow_unexplained_variance <- sum((data_SPEI$predicted_inflow_spei - data_SPEI$Average.Inflow)^2, na.rm = TRUE)
inflow_total_variance <- sum((data_SPEI$Average.Inflow - mean(data_SPEI$Average.Inflow, na.rm = TRUE))^2, na.rm = TRUE)
r_squared_inflow_spei <- 1-inflow_unexplained_variance/inflow_total_variance
if (length(which(is.na(data_SPEI$predicted_inflow_spei) == FALSE)) >10){
statistics[j,10] <- c(r_squared_inflow_spei)
statistics[j,11] <- c(line_values_inflow_spei$coefficients[2])
#Plot SPEI
inflow_title_spei <- paste0(HUC4_data[j,1], " Inflow_SPEI ")
inflow_plot_SPEI <-  ggplot(data_SPEI)+
geom_point(aes(x = SPEI, y = Average.Inflow), color = "navy")+
geom_line(aes(x = SPEI, y = predicted_inflow_spei), color = "brown")+
annotate("text",
x =-0.5,
y = max(data_SPEI$Average.Inflow, na.rm = TRUE),
label = paste0("r^2:",r_squared_inflow_spei),
parse = TRUE,size = 2.5)+
annotate("text",
x =0.5,
y = max(data_SPEI$Average.Inflow, na.rm = TRUE),
label = paste0("slope:", line_values_inflow_spei$coefficients[2]),
parse = TRUE,size = 2.5)+
ggtitle (inflow_title_spei)+
theme_classic()
}
else{
inflow_plot_SPEI <-grid.rect(gp=gpar(col="white"))
}
}
#SSI_analysis Inflow Refence Gages
test <- sum(data_SPEI$Reference_SSI, na.rm = TRUE)
if (test ==0){
inflow_plot_SSI_ref <-grid.rect(gp=gpar(col="white"))
}else{
line_values_inflow_ssi_ref <-  lm(as.numeric(data_SPEI$Average.Inflow) ~ as.numeric(data_SPEI$Reference_SSI), data = data_SPEI)
data_SPEI$predicted_inflow_ssi_ref <- data_SPEI$Reference_SSI*line_values_inflow_ssi_ref$coefficients[2]+ line_values_inflow_ssi_ref$coefficients[1]
inflow_unexplained_variance <- sum((data_SPEI$predicted_inflow_ssi_ref - data_SPEI$Average.Inflow)^2, na.rm = TRUE)
inflow_total_variance <- sum((data_SPEI$Average.Inflow - mean(data_SPEI$Average.Inflow, na.rm = TRUE))^2, na.rm = TRUE)
r_squared_inflow_ssi_ref <- 1-inflow_unexplained_variance/inflow_total_variance
if (length(which(is.na(data_SPEI$predicted_inflow_ssi_ref) == FALSE)) >10){
statistics[j,16] <- c(r_squared_inflow_ssi_ref)
statistics[j,17] <- c(line_values_inflow_ssi_ref$coefficients[2])
#plot SSI reference INflow
inflow_title_ssi_ref <- paste0(HUC4_data[j,1], " Reference_gage_SSI ")
inflow_plot_SSI_ref <-  ggplot(data_SPEI)+
geom_point(aes(x = Reference_SSI, y = Average.Inflow), color = "navy")+
geom_line(aes(x = Reference_SSI, y = predicted_inflow_ssi_ref), color = "brown")+
annotate("text",
x =-0.5,
y = max(data_SPEI$Average.Inflow,na.rm = TRUE),
label = paste0("r^2:",r_squared_inflow_ssi_ref),
parse = TRUE,size = 2.5)+
annotate("text",
x =0.5,
y = max(data_SPEI$Average.Inflow,na.rm = TRUE),
label = paste0("slope:", line_values_inflow_ssi_ref$coefficients[2]),
parse = TRUE,size = 2.5)+
ggtitle (inflow_title_ssi_ref)+
theme_classic()
}else{
inflow_plot_SSI_ref <-grid.rect(gp=gpar(col="white"))
}
}
#SSI_analysis Inflow Non reference Gages
line_values_inflow_ssi <-  lm(as.numeric(data_SPEI$Average.Inflow) ~ as.numeric(data_SPEI$Longest_period_SSI), data = data_SPEI)
data_SPEI$predicted_inflow_ssi <- data_SPEI$Longest_period_SSI*line_values_inflow_ssi_ref$coefficients[2]+ line_values_inflow_ssi_ref$coefficients[1]
inflow_unexplained_variance <- sum((data_SPEI$predicted_inflow_ssi - data_SPEI$Average.Inflow)^2, na.rm = TRUE)
inflow_total_variance <- sum((data_SPEI$Average.Inflow - mean(data_SPEI$Average.Inflow, na.rm = TRUE))^2, na.rm = TRUE)
r_squared_inflow_ssi <- 1-inflow_unexplained_variance/inflow_total_variance
if (length(which(is.na(data_SPEI$predicted_inflow_ssi) == FALSE)) >10){
statistics[j,22] <- c(r_squared_inflow_ssi)
statistics[j,23] <- c(line_values_inflow_ssi$coefficients[2])
#plot SSI Longest Period
inflow_title_ssi_period <- paste0(HUC4_data[j,1], " Longest_Period_SSI ")
inflow_plot_SSI_period <-  ggplot(data_SPEI)+
geom_point(aes(x = Longest_period_SSI, y = Average.Inflow), color = "navy")+
geom_line(aes(x = Longest_period_SSI, y = predicted_inflow_ssi), color = "brown")+
annotate("text",
x =-0.5,
y = max(data_SPEI$Average.Inflow,na.rm = TRUE),
label = paste0("r^2:",r_squared_inflow_ssi),
parse = TRUE,size = 2.5)+
annotate("text",
x =0.5,
y = max(data_SPEI$Average.Inflow,na.rm = TRUE),
label = paste0("slope:", line_values_inflow_ssi$coefficients[2]),
parse = TRUE,size = 2.5)+
ggtitle (inflow_title_ssi_period)+
theme_classic()
}else{
inflow_plot_SSI_period <- grid.rect(gp=gpar(col="white"))
}
}else{
inflow_plot_SPI <-grid.rect(gp=gpar(col="white"))
inflow_plot_SPEI <- grid.rect(gp=gpar(col="white"))
inflow_plot_SSI_ref <-grid.rect(gp=gpar(col="white"))
inflow_plot_SSI_period <- grid.rect(gp=gpar(col="white"))
}
# OUTFLOW ANALYSIS
if (sum(data_SPEI$Average.Outflow, na.rm = TRUE) >0){
if (test_SPI ==0){
outflow_plot_SPI <-grid.rect(gp=gpar(col="white"))
}else{
line_values_outflow_spi <-  lm(as.numeric(data_SPEI$Average.Outflow) ~ as.numeric(data_SPEI$SPI), data = data_SPEI)
data_SPEI$predicted_outflow_spi <- data_SPEI$SPI*line_values_outflow_spi$coefficients[2]+ line_values_outflow_spi$coefficients[1]
outflow_unexplained_variance <- sum((data_SPEI$predicted_outflow_spi - data_SPEI$Average.Outflow)^2, na.rm = TRUE)
outflow_total_variance <- sum((data_SPEI$Average.Outflow - mean(data_SPEI$Average.Outflow, na.rm = TRUE))^2, na.rm = TRUE)
r_squared_outflow_spi <- 1-outflow_unexplained_variance/outflow_total_variance
if (length(which(is.na(data_SPEI$predicted_outflow_spi) == FALSE)) >10){
statistics[j,6] <- c(r_squared_outflow_spi)
statistics[j,7] <- c(line_values_outflow_spi$coefficients[2])
#plot SPI_Outflow
outflow_title_spi <- paste0(HUC4_data[j,1], " Outflow_SPI")
outflow_plot_SPI <-  ggplot(data_SPEI)+
geom_point(aes(x = SPI, y = Average.Outflow), color = "navy")+
geom_line(aes(x = SPI, y = predicted_outflow_spi), color = "brown")+
annotate("text",
x =-0.5,
y = max(data_SPEI$Average.Outflow, na.rm = TRUE),
label = paste0("r^2:",r_squared_outflow_spi),
parse = TRUE,size = 2.5)+
annotate("text",
x =0.5,
y = max(data_SPEI$Average.Outflow, na.rm = TRUE)-100,
label = paste0("slope:", line_values_outflow_spi$coefficients[2]),
parse = TRUE,size = 2.5)+
ggtitle (outflow_title_spi)+
theme_classic()
}else{
outflow_plot_SPI <-grid.rect(gp=gpar(col="white"))
}
}
if (test_SPEI ==0){
outflow_plot_SPEI <-grid.rect(gp=gpar(col="white"))
}else{
line_values_outflow <-  lm(as.numeric(data_SPEI$Average.Outflow) ~ as.numeric(data_SPEI$SPEI), data = data_SPEI)
data_SPEI$predicted_outflow_spei <- data_SPEI$SPEI*line_values_outflow$coefficients[2]+ line_values_outflow$coefficients[1]
outflow_unexplained_variance <- sum((data_SPEI$predicted_outflow_spei - data_SPEI$Average.Outflow)^2, na.rm = TRUE)
outflow_total_variance <- sum((data_SPEI$Average.Outflow - mean(data_SPEI$Average.Outflow, na.rm = TRUE))^2, na.rm = TRUE)
r_squared_outflow_spei <- 1-outflow_unexplained_variance/outflow_total_variance
if (length(which(is.na(data_SPEI$predicted_outflow_spei) == FALSE)) >10){
statistics[j,12] <- c(r_squared_outflow_spei)
statistics[j,13] <- c(line_values_outflow$coefficients[2])
#plot SPEI_Outflow
outflow_title_spei <- paste0(HUC4_data[j,1], " Outflow_SPEI")
outflow_plot_SPEI <-  ggplot(data_SPEI)+
geom_point(aes(x = SPEI, y = Average.Outflow), color = "navy")+
geom_line(aes(x = SPEI, y = predicted_outflow_spei), color = "brown")+
annotate("text",
x =-0.5,
y = max(data_SPEI$Average.Outflow, na.rm = TRUE),
label = paste0("r^2:",r_squared_outflow_spei),
parse = TRUE,size = 2.5)+
annotate("text",
x =0.5,
y = max(data_SPEI$Average.Outflow, na.rm = TRUE)-100,
label = paste0("slope:", line_values_outflow$coefficients[2]),
parse = TRUE,size = 2.5)+
ggtitle (outflow_title_spei)+
theme_classic()
}else{
outflow_plot_SPEI <-grid.rect(gp=gpar(col="white"))
}
}
#SSI_analysis Outflow Refence Gages
test <- sum(data_SPEI$Reference_SSI, na.rm = TRUE)
if (test ==0){
outflow_plot_SSI_ref <-grid.rect(gp=gpar(col="white"))
}else{
line_values_outflow_ssi_ref <-  lm(as.numeric(data_SPEI$Average.Outflow) ~ as.numeric(data_SPEI$Reference_SSI), data = data_SPEI)
data_SPEI$predicted_outflow_ssi_ref <- data_SPEI$Reference_SSI*line_values_outflow_ssi_ref$coefficients[2]+ line_values_outflow_ssi_ref$coefficients[1]
outflow_unexplained_variance <- sum((data_SPEI$predicted_outflow_ssi_ref - data_SPEI$Average.Outflow)^2, na.rm = TRUE)
outflow_total_variance <- sum((data_SPEI$Average.Outflow - mean(data_SPEI$Average.Outflow, na.rm = TRUE))^2, na.rm = TRUE)
r_squared_outflow_ssi_ref <- 1-outflow_unexplained_variance/outflow_total_variance
if (length(which(is.na(data_SPEI$predicted_outflow_ssi_ref) == FALSE)) >10){
statistics[j,18] <- c(r_squared_outflow_ssi_ref)
statistics[j,19] <- c(line_values_outflow_ssi_ref$coefficients[2])
#plot SSI reference Storage
outflow_title_ssi_ref <- paste0(HUC4_data[j,1], " Reference_gage_SSI ")
outflow_plot_SSI_ref <-  ggplot(data_SPEI)+
geom_point(aes(x = Reference_SSI, y = Average.Outflow), color = "navy")+
geom_line(aes(x = Reference_SSI, y = predicted_outflow_ssi_ref), color = "brown")+
annotate("text",
x =-0.5,
y = max(data_SPEI$Average.Outflow,na.rm = TRUE),
label = paste0("r^2:",r_squared_outflow_ssi_ref),
parse = TRUE,size = 2.5)+
annotate("text",
x =0.5,
y = max(data_SPEI$Average.Outflow,na.rm = TRUE),
label = paste0("slope:", line_values_outflow_ssi_ref$coefficients[2]),
parse = TRUE,size = 2.5)+
ggtitle (outflow_title_ssi_ref)+
theme_classic()
}else{
outflow_plot_SSI_ref <-grid.rect(gp=gpar(col="white"))
}
}
#SSI_analysis Outflow Non reference Gages
line_values_outflow_ssi <-  lm(as.numeric(data_SPEI$Average.Outflow) ~ as.numeric(data_SPEI$Longest_period_SSI), data = data_SPEI)
data_SPEI$predicted_outflow_ssi <- data_SPEI$Longest_period_SSI*line_values_outflow_ssi_ref$coefficients[2]+ line_values_outflow_ssi_ref$coefficients[1]
outflow_unexplained_variance <- sum((data_SPEI$predicted_outflow_ssi - data_SPEI$Average.Outflow)^2, na.rm = TRUE)
outflow_total_variance <- sum((data_SPEI$Average.Outflow - mean(data_SPEI$Average.Outflow, na.rm = TRUE))^2, na.rm = TRUE)
r_squared_outflow_ssi <- 1-outflow_unexplained_variance/outflow_total_variance
if (length(which(is.na(data_SPEI$predicted_outflow_ssi) == FALSE)) >10){
statistics[j,24] <- c(r_squared_outflow_ssi)
statistics[j,25] <- c(line_values_outflow_ssi$coefficients[2])
#plot SSI Longest Period
outflow_title_ssi_period <- paste0(HUC4_data[j,1], " Longest_Period_SSI ")
outflow_plot_SSI_period <-  ggplot(data_SPEI)+
geom_point(aes(x = Longest_period_SSI, y = Average.Outflow), color = "navy")+
geom_line(aes(x = Longest_period_SSI, y = predicted_outflow_ssi), color = "brown")+
annotate("text",
x =-0.5,
y = max(data_SPEI$Average.Outflow,na.rm = TRUE),
label = paste0("r^2:",r_squared_outflow_ssi),
parse = TRUE,size = 2.5)+
annotate("text",
x =0.5,
y = max(data_SPEI$Average.Outflow,na.rm = TRUE),
label = paste0("slope:", line_values_outflow_ssi$coefficients[2]),
parse = TRUE,size = 2.5)+
ggtitle (outflow_title_ssi_period)+
theme_classic()
}else{
outflow_plot_SSI_period <- grid.rect(gp=gpar(col="white"))
}
}else{
outflow_plot_SPI <- grid.rect(gp=gpar(col="white"))
outflow_plot_SPEI <- grid.rect(gp=gpar(col="white"))
outflow_plot_SSI_ref <- grid.rect(gp=gpar(col="white"))
outflow_plot_SSI_period <- grid.rect(gp=gpar(col="white"))
}
#
#  # Step 4: Plot Both all Storage, Outflow, Inflow for SPI
all_graphs <-grid.arrange(storage_plot_SPI, inflow_plot_SPI, outflow_plot_SPI, storage_plot_SPEI, inflow_plot_SPEI, outflow_plot_SPEI,
storage_plot_SSI_ref,  inflow_plot_SSI_ref, outflow_plot_SSI_ref, storage_plot_SSI_period, inflow_plot_SSI_period,
outflow_plot_SSI_period, nrow = 4, ncol = 3)
setwd("~/Desktop/Research/Drought_Comparison/r_squared_plots/")
file_name <- paste0(HUC4_data[j,1],"_Drought_Analysis.png")
ggsave(filename = file_name, all_graphs)
setwd("~/Desktop/Research/Drought_Comparison")
statistics_renamed <- data.frame("DAM_ID" = statistics[,1], "stor_r_squared_spi" = statistics[,2], "stor_slope_spi" = statistics[,3],
"inflow_r_spi" = statistics[,4], "inflow_slope_spi" = statistics[,5], "outflow_r_spi"= statistics[,6],
":outflow_slope_spi" = statistics[,7],
"stor_r_spei" = statistics[,8], "stor_slope_spei" = statistics[,9], "inflow_r_spei" = statistics[,10],
"inflow_slope_spei" = statistics[,11], "outflow_r_spei" = statistics[,12], "outflow_slope_spei"= statistics[,13],
"stor_r_ssi_ref" = statistics[,14], "stor_slope_ssi_ref" = statistics[,15], "inflow_r_ssi_ref" = statistics[,16],
"inflow_slope_ssi_ref" = statistics[,17], "outflow_r_ssi_ref" = statistics[,18], "outflow_slope_ssi_ref" = statistics[,19],
"stor_r_ssi_period" = statistics[,20], "stor_slope_ssi_period" = statistics[,21], "inflow_r_ssi_period" = statistics[,22],
"inflow_slope_ssi_period" = statistics[,23], "outflow_r_ssi_period" = statistics[,24], "outflow_slope_ssi_period" = statistics[,25],
"huc4" = statistics[,26], "Long" = statistics[,28], "lat"= statistics[,27], stringsAsFactors = FALSE) #finish this once I have all the right things added
write.csv(statistics_renamed, file= "Stats_All_Indices.csv", row.names = FALSE)
0-NA
y="ResOpsUS_956.csv"
setwd("~/Desktop/github/USRDATS/TimeSeries_all/")
data <- read.csv(file = y, stringsAsFactors = F)
dates <- as.Date(data[,1])
years = unique(year(dates)) #find all the different years we have
mean_matrix <- matrix(data = NA, nrow = length(years), ncol= 6) #make a matrix to hold the values
mean_matrix[,1] <- years
#####
# Find averages and Max's by year for the file
#####
total_years <- length(years)-1
for ( l in 2:total_years){
year_end <- years[l]
year_start<- year_end -1
start_date <- paste0(year_start, "-10-01")
end_date <- paste0(year_end, "-09-30")
test <-  data %>% filter(date >= start_date) %>% filter(date <= end_date) #filter the data by year
if (nrow(test) == 0){
next
}
if(is.na(test[nrow(test),2]) == TRUE| is.na(as.numeric(test[1,2]) == NA){
change_stor = NA
}else{
change_stor <-as.numeric(test[nrow(test),2]) - as.numeric(test[1,2]) #starting storage
}
mean_stor <- mean(test$storage, na.rm = T) #calculate the average storage, removing NA values
total_inflow <- sum(test$inflow, na.rm = T) #calculate the mean inflow, removing NA
total_outflow <- sum(test$outflow, na.rm = T) #calculate the mean outflow, removing NA
if (total_inflow == 0){
total_inflow <- NA
}
if (total_outflow == 0){
total_outflow <- NA
}
mean_matrix[l, 2] <- change_stor
mean_matrix[l,3] <- mean_stor
mean_matrix[l, 4] <- total_inflow #plug in mean inflow
mean_matrix[l, 5] <- total_outflow #plug in mean outflow
}
setwd("~/Desktop/github/USRDATS/TimeSeries_all/")
data <- read.csv(file = y, stringsAsFactors = F)
dates <- as.Date(data[,1])
years = unique(year(dates)) #find all the different years we have
mean_matrix <- matrix(data = NA, nrow = length(years), ncol= 6) #make a matrix to hold the values
mean_matrix[,1] <- years
#####
# Find averages and Max's by year for the file
#####
total_years <- length(years)-1
for ( l in 2:total_years){
year_end <- years[l]
year_start<- year_end -1
start_date <- paste0(year_start, "-10-01")
end_date <- paste0(year_end, "-09-30")
test <-  data %>% filter(date >= start_date) %>% filter(date <= end_date) #filter the data by year
if (nrow(test) == 0){
next
}
if(is.na(test[nrow(test),2]) == TRUE| is.na(as.numeric(test[1,2])) == TRUE){
change_stor = NA
}else{
change_stor <-as.numeric(test[nrow(test),2]) - as.numeric(test[1,2]) #starting storage
}
mean_stor <- mean(test$storage, na.rm = T) #calculate the average storage, removing NA values
total_inflow <- sum(test$inflow, na.rm = T) #calculate the mean inflow, removing NA
total_outflow <- sum(test$outflow, na.rm = T) #calculate the mean outflow, removing NA
if (total_inflow == 0){
total_inflow <- NA
}
if (total_outflow == 0){
total_outflow <- NA
}
mean_matrix[l, 2] <- change_stor
mean_matrix[l,3] <- mean_stor
mean_matrix[l, 4] <- total_inflow #plug in mean inflow
mean_matrix[l, 5] <- total_outflow #plug in mean outflow
}
View(mean_matrix)
year_end = 2017
year_end <- years[l]
year_start<- year_end -1
start_date <- paste0(year_start, "-10-01")
end_date <- paste0(year_end, "-09-30")
test <-  data %>% filter(date >= start_date) %>% filter(date <= end_date) #filter the data by year
if (nrow(test) == 0){
next
}
if(is.na(test[nrow(test),2]) == TRUE| is.na(as.numeric(test[1,2])) == TRUE){
change_stor = NA
}else{
change_stor <-as.numeric(test[nrow(test),2]) - as.numeric(test[1,2]) #starting storage
}
mean_stor <- mean(test$storage, na.rm = T) #calculate the average storage, removing NA values
total_inflow <- sum(test$inflow, na.rm = T) #calculate the mean inflow, removing NA
total_outflow <- sum(test$outflow, na.rm = T) #calculate the mean outflow, removing NA
total_outflow
for ( l in 2:total_years){
year_end <- years[l]
year_start<- year_end -1
start_date <- paste0(year_start, "-10-01")
end_date <- paste0(year_end, "-09-30")
test <-  data %>% filter(date >= start_date) %>% filter(date <= end_date) #filter the data by year
if (nrow(test) == 0){
next
}
if(is.na(test[nrow(test),2]) == TRUE| is.na(as.numeric(test[1,2])) == TRUE){
change_stor = NA
}else{
change_stor <-as.numeric(test[nrow(test),2]) - as.numeric(test[1,2]) #starting storage
}
mean_stor <- mean(test$storage, na.rm = T) #calculate the average storage, removing NA values
total_inflow <- sum(test$inflow, na.rm = T) #calculate the mean inflow, removing NA
total_outflow <- sum(test$outflow, na.rm = T) #calculate the mean outflow, removing NA
mean_matrix[l, 2] <- change_stor
mean_matrix[l,3] <- mean_stor
mean_matrix[l, 4] <- total_inflow #plug in mean inflow
mean_matrix[l, 5] <- total_outflow #plug in mean outflow
}
View(data)
View(data)
which(data$outflow >100,000)
which(as.numeric(data$outflow) >100,000)
length(total_years)
nchar(total_years)
total_years
l=43
year_end <- years[l]
year_start<- year_end -1
start_date <- paste0(year_start, "-10-01")
end_date <- paste0(year_end, "-09-30")
test <-  data %>% filter(date >= start_date) %>% filter(date <= end_date) #filter the data by year
View(test)
total_outflow <- sum(test$outflow, na.rm = T) #calculate the mean outflow, removing NA
total_outflow
test$outflow
mean_matrix[l, 5] <- total_outflow #plug in mean outflow
total_inflow <- sum(test$inflow, na.rm = T) #calculate the mean inflow, removing NA
total_inflow
test$inflow
y
which(data$inflow > 10,000)
